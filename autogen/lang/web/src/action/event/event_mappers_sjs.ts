// File auto-generated by protoc-gen-simple-ts
import * as event_pb from './event_pb'
import * as action_event_v1_types from './event_types_sjs'
import * as action_event_v1_mappers from './event_mappers_sjs'
import * as action_crud_v1_types from '../crud/api_types_sjs'
import * as action_crud_v1_mappers from '../crud/api_mappers_sjs'


export const mapEventToGrpcWeb = (input?: action_event_v1_types.Event): event_pb.Event | undefined => {
	if (!input) return
	const result = new event_pb.Event()
	if (input?.version !== undefined) result.setVersion(input.version)
	const tmpType = mapEventTypeToGrpcWeb(input?.type);
    if (tmpType !== undefined) result.setType(tmpType)
	if (input?.data !== undefined) result.setData(input.data)
	return result
}

export const mapEventFromGrpcWeb = (input?: event_pb.Event): action_event_v1_types.Event | undefined => {
	if (!input) return
	const result: action_event_v1_types.Event = {
        version: input.getVersion(),
        type: mapEventTypeFromGrpcWeb(input.getType()),
        data: input.getData(),
	}
	return result
}

export const mapExecuteJobDataToGrpcWeb = (input?: action_event_v1_types.ExecuteJobData): event_pb.ExecuteJobData | undefined => {
	if (!input) return
	const result = new event_pb.ExecuteJobData()
	const tmpJob = action_crud_v1_mappers.mapJobToGrpcWeb(input?.job);
    if (tmpJob !== undefined) result.setJob(tmpJob)
	if (input?.actionId !== undefined) result.setActionid(input.actionId)
	return result
}

export const mapExecuteJobDataFromGrpcWeb = (input?: event_pb.ExecuteJobData): action_event_v1_types.ExecuteJobData | undefined => {
	if (!input) return
	const result: action_event_v1_types.ExecuteJobData = {
        job: action_crud_v1_mappers.mapJobFromGrpcWeb(input.getJob()),
        actionId: input.getActionid(),
	}
	return result
}

export const mapJobStatusChangeDataToGrpcWeb = (input?: action_event_v1_types.JobStatusChangeData): event_pb.JobStatusChangeData | undefined => {
	if (!input) return
	const result = new event_pb.JobStatusChangeData()
	const tmpOldJob = action_crud_v1_mappers.mapJobToGrpcWeb(input?.oldJob);
    if (tmpOldJob !== undefined) result.setOldjob(tmpOldJob)
	const tmpNewJob = action_crud_v1_mappers.mapJobToGrpcWeb(input?.newJob);
    if (tmpNewJob !== undefined) result.setNewjob(tmpNewJob)
	if (input?.actionId !== undefined) result.setActionid(input.actionId)
	return result
}

export const mapJobStatusChangeDataFromGrpcWeb = (input?: event_pb.JobStatusChangeData): action_event_v1_types.JobStatusChangeData | undefined => {
	if (!input) return
	const result: action_event_v1_types.JobStatusChangeData = {
        oldJob: action_crud_v1_mappers.mapJobFromGrpcWeb(input.getOldjob()),
        newJob: action_crud_v1_mappers.mapJobFromGrpcWeb(input.getNewjob()),
        actionId: input.getActionid(),
	}
	return result
}

export const mapEventTypeToGrpcWeb = (input?: action_event_v1_types.EventType): event_pb.EventType | undefined => {
	if (input === undefined) return
	switch (input) {
		case action_event_v1_types.EventType.UNKNOWN_EVENT_TYPE: return event_pb.EventType.UNKNOWN_EVENT_TYPE
		case action_event_v1_types.EventType.EXECUTE_JOB: return event_pb.EventType.EXECUTE_JOB
		case action_event_v1_types.EventType.JOB_STATUS_CHANGE: return event_pb.EventType.JOB_STATUS_CHANGE
	}
}

export const mapEventTypeFromGrpcWeb = (input?: event_pb.EventType): action_event_v1_types.EventType | undefined => {
	if (input === undefined) return
	switch (input) {
		case event_pb.EventType.UNKNOWN_EVENT_TYPE: return action_event_v1_types.EventType.UNKNOWN_EVENT_TYPE
		case event_pb.EventType.EXECUTE_JOB: return action_event_v1_types.EventType.EXECUTE_JOB
		case event_pb.EventType.JOB_STATUS_CHANGE: return action_event_v1_types.EventType.JOB_STATUS_CHANGE
	}
}

