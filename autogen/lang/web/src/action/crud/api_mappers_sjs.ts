// File auto-generated by protoc-gen-simple-ts
import * as api_pb from './api_pb'
import * as action_crud_v1_types from './api_types_sjs'
import * as action_crud_v1_mappers from './api_mappers_sjs'


export const mapActionToGrpcWeb = (input?: action_crud_v1_types.Action): api_pb.Action | undefined => {
	if (!input) return
	const result = new api_pb.Action()
	if (input?.uid !== undefined) result.setUid(input.uid)
	if (input?.userId !== undefined) result.setUserid(input.userId)
	if (input?.tenantId !== undefined) result.setTenantid(input.tenantId)
	if (input?.domainId !== undefined) result.setDomainid(input.domainId)
	if (input?.jobs !== undefined) {
		input.jobs.forEach((x: action_crud_v1_types.Job, i: number) => {
			result.addJobs(mapJobToGrpcWeb(x), i)
		})
    }
	if (input?.createdAt !== undefined) result.setCreatedat(input.createdAt)
	if (input?.createdBy !== undefined) result.setCreatedby(input.createdBy)
	if (input?.updatedAt !== undefined) result.setUpdatedat(input.updatedAt)
	if (input?.updatedBy !== undefined) result.setUpdatedby(input.updatedBy)
	if (input?.deletedAt !== undefined) result.setDeletedat(input.deletedAt)
	if (input?.deletedBy !== undefined) result.setDeletedby(input.deletedBy)
	return result
}

export const mapActionFromGrpcWeb = (input?: api_pb.Action): action_crud_v1_types.Action | undefined => {
	if (!input) return
	const result: action_crud_v1_types.Action = {
        uid: input.getUid(),
        userId: input.getUserid(),
        tenantId: input.getTenantid(),
        domainId: input.getDomainid(),

        createdAt: input.getCreatedat(),
        createdBy: input.getCreatedby(),
        updatedAt: input.getUpdatedat(),
        updatedBy: input.getUpdatedby(),
        deletedAt: input.getDeletedat(),
        deletedBy: input.getDeletedby(),
	}
    const jobsList: Array<action_crud_v1_types.Job> = []
	input.getJobsList().forEach((x: any) => {
		const val = mapJobFromGrpcWeb(x)
		if (val !== undefined) jobsList.push(val)
	})
	result.jobs = jobsList

	return result
}

export const mapActionResponseToGrpcWeb = (input?: action_crud_v1_types.ActionResponse): api_pb.ActionResponse | undefined => {
	if (!input) return
	const result = new api_pb.ActionResponse()
	if (input?.uid !== undefined) result.setUid(input.uid)
	return result
}

export const mapActionResponseFromGrpcWeb = (input?: api_pb.ActionResponse): action_crud_v1_types.ActionResponse | undefined => {
	if (!input) return
	const result: action_crud_v1_types.ActionResponse = {
        uid: input.getUid(),
	}
	return result
}

export const mapActionResultToGrpcWeb = (input?: action_crud_v1_types.ActionResult): api_pb.ActionResult | undefined => {
	if (!input) return
	const result = new api_pb.ActionResult()
	if (input?.uid !== undefined) result.setUid(input.uid)
	if (input?.jobs !== undefined) {
		input.jobs.forEach((x: action_crud_v1_types.Job, i: number) => {
			result.addJobs(mapJobToGrpcWeb(x), i)
		})
    }
	const tmpSummary = mapJobsSummaryToGrpcWeb(input?.summary);
    if (tmpSummary !== undefined) result.setSummary(tmpSummary)
	return result
}

export const mapActionResultFromGrpcWeb = (input?: api_pb.ActionResult): action_crud_v1_types.ActionResult | undefined => {
	if (!input) return
	const result: action_crud_v1_types.ActionResult = {
        uid: input.getUid(),

        summary: mapJobsSummaryFromGrpcWeb(input.getSummary()),
	}
    const jobsList: Array<action_crud_v1_types.Job> = []
	input.getJobsList().forEach((x: any) => {
		const val = mapJobFromGrpcWeb(x)
		if (val !== undefined) jobsList.push(val)
	})
	result.jobs = jobsList

	return result
}

export const mapJobsSummaryToGrpcWeb = (input?: action_crud_v1_types.JobsSummary): api_pb.JobsSummary | undefined => {
	if (!input) return
	const result = new api_pb.JobsSummary()
	if (input?.total !== undefined) result.setTotal(input.total)
	if (input?.pending !== undefined) result.setPending(input.pending)
	if (input?.started !== undefined) result.setStarted(input.started)
	if (input?.completed !== undefined) result.setCompleted(input.completed)
	if (input?.failed !== undefined) result.setFailed(input.failed)
	return result
}

export const mapJobsSummaryFromGrpcWeb = (input?: api_pb.JobsSummary): action_crud_v1_types.JobsSummary | undefined => {
	if (!input) return
	const result: action_crud_v1_types.JobsSummary = {
        total: input.getTotal(),
        pending: input.getPending(),
        started: input.getStarted(),
        completed: input.getCompleted(),
        failed: input.getFailed(),
	}
	return result
}

export const mapJobRunRequirementsToGrpcWeb = (input?: action_crud_v1_types.JobRunRequirements): api_pb.JobRunRequirements | undefined => {
	if (!input) return
	const result = new api_pb.JobRunRequirements()
	if (input?.minTime !== undefined) result.setMintime(input.minTime)
	if (input?.jobsCompleted !== undefined) result.setJobscompletedList(input.jobsCompleted)
	return result
}

export const mapJobRunRequirementsFromGrpcWeb = (input?: api_pb.JobRunRequirements): action_crud_v1_types.JobRunRequirements | undefined => {
	if (!input) return
	const result: action_crud_v1_types.JobRunRequirements = {
        minTime: input.getMintime(),
        jobsCompleted: input.getJobscompletedList(),
	}
	return result
}

export const mapJobToGrpcWeb = (input?: action_crud_v1_types.Job): api_pb.Job | undefined => {
	if (!input) return
	const result = new api_pb.Job()
	if (input?.uid !== undefined) result.setUid(input.uid)
	if (input?.userId !== undefined) result.setUserid(input.userId)
	if (input?.tenantId !== undefined) result.setTenantid(input.tenantId)
	if (input?.domainId !== undefined) result.setDomainid(input.domainId)
	const tmpJobStatus = mapJobStatusToGrpcWeb(input?.jobStatus);
    if (tmpJobStatus !== undefined) result.setJobstatus(tmpJobStatus)
	if (input?.jobType !== undefined) result.setJobtype(input.jobType)
	if (input?.jobData !== undefined) result.setJobdata(input.jobData)
	const tmpRunRequirements = mapJobRunRequirementsToGrpcWeb(input?.runRequirements);
    if (tmpRunRequirements !== undefined) result.setRunrequirements(tmpRunRequirements)
	if (input?.order !== undefined) result.setOrder(input.order)
	if (input?.startedAt !== undefined) result.setStartedat(input.startedAt)
	if (input?.completedAt !== undefined) result.setCompletedat(input.completedAt)
	if (input?.failedAt !== undefined) result.setFailedat(input.failedAt)
	if (input?.createdAt !== undefined) result.setCreatedat(input.createdAt)
	if (input?.createdBy !== undefined) result.setCreatedby(input.createdBy)
	if (input?.updatedAt !== undefined) result.setUpdatedat(input.updatedAt)
	if (input?.updatedBy !== undefined) result.setUpdatedby(input.updatedBy)
	if (input?.deletedAt !== undefined) result.setDeletedat(input.deletedAt)
	if (input?.deletedBy !== undefined) result.setDeletedby(input.deletedBy)
	return result
}

export const mapJobFromGrpcWeb = (input?: api_pb.Job): action_crud_v1_types.Job | undefined => {
	if (!input) return
	const result: action_crud_v1_types.Job = {
        uid: input.getUid(),
        userId: input.getUserid(),
        tenantId: input.getTenantid(),
        domainId: input.getDomainid(),
        jobStatus: mapJobStatusFromGrpcWeb(input.getJobstatus()),
        jobType: input.getJobtype(),
        jobData: input.getJobdata(),
        runRequirements: mapJobRunRequirementsFromGrpcWeb(input.getRunrequirements()),
        order: input.getOrder(),
        startedAt: input.getStartedat(),
        completedAt: input.getCompletedat(),
        failedAt: input.getFailedat(),
        createdAt: input.getCreatedat(),
        createdBy: input.getCreatedby(),
        updatedAt: input.getUpdatedat(),
        updatedBy: input.getUpdatedby(),
        deletedAt: input.getDeletedat(),
        deletedBy: input.getDeletedby(),
	}
	return result
}

export const mapActionTypeToGrpcWeb = (input?: action_crud_v1_types.ActionType): api_pb.ActionType | undefined => {
	if (input === undefined) return
	switch (input) {
		case action_crud_v1_types.ActionType.UNKNOWN_ACTION_TYPE: return api_pb.ActionType.UNKNOWN_ACTION_TYPE
		case action_crud_v1_types.ActionType.ACTION_TYPE_ONE_OFF: return api_pb.ActionType.ACTION_TYPE_ONE_OFF
		case action_crud_v1_types.ActionType.ACTION_TYPE_SCHEDULED: return api_pb.ActionType.ACTION_TYPE_SCHEDULED
	}
}

export const mapActionTypeFromGrpcWeb = (input?: api_pb.ActionType): action_crud_v1_types.ActionType | undefined => {
	if (input === undefined) return
	switch (input) {
		case api_pb.ActionType.UNKNOWN_ACTION_TYPE: return action_crud_v1_types.ActionType.UNKNOWN_ACTION_TYPE
		case api_pb.ActionType.ACTION_TYPE_ONE_OFF: return action_crud_v1_types.ActionType.ACTION_TYPE_ONE_OFF
		case api_pb.ActionType.ACTION_TYPE_SCHEDULED: return action_crud_v1_types.ActionType.ACTION_TYPE_SCHEDULED
	}
}

export const mapJobStatusToGrpcWeb = (input?: action_crud_v1_types.JobStatus): api_pb.JobStatus | undefined => {
	if (input === undefined) return
	switch (input) {
		case action_crud_v1_types.JobStatus.UNKNOWN_JOB_STATUS: return api_pb.JobStatus.UNKNOWN_JOB_STATUS
		case action_crud_v1_types.JobStatus.JOB_STATUS_PENDING: return api_pb.JobStatus.JOB_STATUS_PENDING
		case action_crud_v1_types.JobStatus.JOB_STATUS_STARTED: return api_pb.JobStatus.JOB_STATUS_STARTED
		case action_crud_v1_types.JobStatus.JOB_STATUS_COMPLETED: return api_pb.JobStatus.JOB_STATUS_COMPLETED
		case action_crud_v1_types.JobStatus.JOB_STATUS_FAILED: return api_pb.JobStatus.JOB_STATUS_FAILED
	}
}

export const mapJobStatusFromGrpcWeb = (input?: api_pb.JobStatus): action_crud_v1_types.JobStatus | undefined => {
	if (input === undefined) return
	switch (input) {
		case api_pb.JobStatus.UNKNOWN_JOB_STATUS: return action_crud_v1_types.JobStatus.UNKNOWN_JOB_STATUS
		case api_pb.JobStatus.JOB_STATUS_PENDING: return action_crud_v1_types.JobStatus.JOB_STATUS_PENDING
		case api_pb.JobStatus.JOB_STATUS_STARTED: return action_crud_v1_types.JobStatus.JOB_STATUS_STARTED
		case api_pb.JobStatus.JOB_STATUS_COMPLETED: return action_crud_v1_types.JobStatus.JOB_STATUS_COMPLETED
		case api_pb.JobStatus.JOB_STATUS_FAILED: return action_crud_v1_types.JobStatus.JOB_STATUS_FAILED
	}
}

