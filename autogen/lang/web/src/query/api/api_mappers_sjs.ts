// File auto-generated by protoc-gen-simple-ts
import * as api_pb from './api_pb'
import * as query_api_v1_types from './api_types_sjs'
import * as query_api_v1_mappers from './api_mappers_sjs'


export const mapGetObjectsRequestToGrpcWeb = (input?: query_api_v1_types.GetObjectsRequest): api_pb.GetObjectsRequest | undefined => {
	if (!input) return
	const result = new api_pb.GetObjectsRequest()
	if (input?.resourceId !== undefined) result.setResourceid(input.resourceId)
	if (input?.query !== undefined) result.setQuery(input.query)
	if (input?.limit !== undefined) result.setLimit(input.limit)
	if (input?.sorting !== undefined) result.setSortingList(input.sorting)
	if (input?.cursor !== undefined) result.setCursor(input.cursor)
	return result
}

export const mapGetObjectsRequestFromGrpcWeb = (input?: api_pb.GetObjectsRequest): query_api_v1_types.GetObjectsRequest | undefined => {
	if (!input) return
	const result: query_api_v1_types.GetObjectsRequest = {
        resourceId: input.getResourceid(),
        query: input.getQuery(),
        limit: input.getLimit(),
        sorting: input.getSortingList(),
        cursor: input.getCursor(),
	}
	return result
}

export const mapGetObjectsResponseToGrpcWeb = (input?: query_api_v1_types.GetObjectsResponse): api_pb.GetObjectsResponse | undefined => {
	if (!input) return
	const result = new api_pb.GetObjectsResponse()
	if (input?.results !== undefined) result.setResults(input.results)
	if (input?.total !== undefined) result.setTotal(input.total)
	if (input?.cursor !== undefined) result.setCursor(input.cursor)
	return result
}

export const mapGetObjectsResponseFromGrpcWeb = (input?: api_pb.GetObjectsResponse): query_api_v1_types.GetObjectsResponse | undefined => {
	if (!input) return
	const result: query_api_v1_types.GetObjectsResponse = {
        results: input.getResults(),
        total: input.getTotal(),
        cursor: input.getCursor(),
	}
	return result
}

export const mapGetSchemaRequestToGrpcWeb = (input?: query_api_v1_types.GetSchemaRequest): api_pb.GetSchemaRequest | undefined => {
	if (!input) return
	const result = new api_pb.GetSchemaRequest()
	if (input?.resourceId !== undefined) result.setResourceid(input.resourceId)
	return result
}

export const mapGetSchemaRequestFromGrpcWeb = (input?: api_pb.GetSchemaRequest): query_api_v1_types.GetSchemaRequest | undefined => {
	if (!input) return
	const result: query_api_v1_types.GetSchemaRequest = {
        resourceId: input.getResourceid(),
	}
	return result
}

export const mapGetFieldSchemaRequestToGrpcWeb = (input?: query_api_v1_types.GetFieldSchemaRequest): api_pb.GetFieldSchemaRequest | undefined => {
	if (!input) return
	const result = new api_pb.GetFieldSchemaRequest()
	if (input?.resourceId !== undefined) result.setResourceid(input.resourceId)
	if (input?.accessor !== undefined) result.setAccessor(input.accessor)
	return result
}

export const mapGetFieldSchemaRequestFromGrpcWeb = (input?: api_pb.GetFieldSchemaRequest): query_api_v1_types.GetFieldSchemaRequest | undefined => {
	if (!input) return
	const result: query_api_v1_types.GetFieldSchemaRequest = {
        resourceId: input.getResourceid(),
        accessor: input.getAccessor(),
	}
	return result
}

export const mapGetSchemaResponseToGrpcWeb = (input?: query_api_v1_types.GetSchemaResponse): api_pb.GetSchemaResponse | undefined => {
	if (!input) return
	const result = new api_pb.GetSchemaResponse()
	const tmpSchema = mapSchemaFieldToGrpcWeb(input?.schema);
    if (tmpSchema !== undefined) result.setSchema(tmpSchema)
	return result
}

export const mapGetSchemaResponseFromGrpcWeb = (input?: api_pb.GetSchemaResponse): query_api_v1_types.GetSchemaResponse | undefined => {
	if (!input) return
	const result: query_api_v1_types.GetSchemaResponse = {
        schema: mapSchemaFieldFromGrpcWeb(input.getSchema()),
	}
	return result
}

export const mapSchemaFieldToGrpcWeb = (input?: query_api_v1_types.SchemaField): api_pb.SchemaField | undefined => {
	if (!input) return
	const result = new api_pb.SchemaField()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.type !== undefined) result.setType(input.type)
	if (input?.fields !== undefined) {
		input.fields.forEach((x: query_api_v1_types.SchemaField, i: number) => {
			result.addFields(mapSchemaFieldToGrpcWeb(x), i)
		})
    }
	const tmpMetadata = mapSchemaFieldMetadataToGrpcWeb(input?.metadata);
    if (tmpMetadata !== undefined) result.setMetadata(tmpMetadata)
	if (input?.accessor !== undefined) result.setAccessor(input.accessor)
	return result
}

export const mapSchemaFieldFromGrpcWeb = (input?: api_pb.SchemaField): query_api_v1_types.SchemaField | undefined => {
	if (!input) return
	const result: query_api_v1_types.SchemaField = {
        name: input.getName(),
        type: input.getType(),

        metadata: mapSchemaFieldMetadataFromGrpcWeb(input.getMetadata()),
        accessor: input.getAccessor(),
	}
    const fieldsList: Array<query_api_v1_types.SchemaField> = []
	input.getFieldsList().forEach((x: any) => {
		const val = mapSchemaFieldFromGrpcWeb(x)
		if (val !== undefined) fieldsList.push(val)
	})
	result.fields = fieldsList

	return result
}

export const mapSchemaFieldMetadataToGrpcWeb = (input?: query_api_v1_types.SchemaFieldMetadata): api_pb.SchemaFieldMetadata | undefined => {
	if (!input) return
	const result = new api_pb.SchemaFieldMetadata()
	if (input?.mapping !== undefined) result.setMapping(input.mapping)
	if (input?.type !== undefined) result.setType(input.type)
	if (input?.values !== undefined) {
		input.values.forEach((x: query_api_v1_types.SchemaFieldMetadataValue, i: number) => {
			result.addValues(mapSchemaFieldMetadataValueToGrpcWeb(x), i)
		})
    }
	if (input?.label !== undefined) result.setLabel(input.label)
	return result
}

export const mapSchemaFieldMetadataFromGrpcWeb = (input?: api_pb.SchemaFieldMetadata): query_api_v1_types.SchemaFieldMetadata | undefined => {
	if (!input) return
	const result: query_api_v1_types.SchemaFieldMetadata = {
        mapping: input.getMapping(),
        type: input.getType(),

        label: input.getLabel(),
	}
    const valuesList: Array<query_api_v1_types.SchemaFieldMetadataValue> = []
	input.getValuesList().forEach((x: any) => {
		const val = mapSchemaFieldMetadataValueFromGrpcWeb(x)
		if (val !== undefined) valuesList.push(val)
	})
	result.values = valuesList

	return result
}

export const mapSchemaFieldMetadataValueToGrpcWeb = (input?: query_api_v1_types.SchemaFieldMetadataValue): api_pb.SchemaFieldMetadataValue | undefined => {
	if (!input) return
	const result = new api_pb.SchemaFieldMetadataValue()
	if (input?.label !== undefined) result.setLabel(input.label)
	if (input?.value !== undefined) result.setValue(input.value)
	if (input?.active !== undefined) result.setActive(input.active)
	if (input?.defaultValue !== undefined) result.setDefaultvalue(input.defaultValue)
	return result
}

export const mapSchemaFieldMetadataValueFromGrpcWeb = (input?: api_pb.SchemaFieldMetadataValue): query_api_v1_types.SchemaFieldMetadataValue | undefined => {
	if (!input) return
	const result: query_api_v1_types.SchemaFieldMetadataValue = {
        label: input.getLabel(),
        value: input.getValue(),
        active: input.getActive(),
        defaultValue: input.getDefaultvalue(),
	}
	return result
}

