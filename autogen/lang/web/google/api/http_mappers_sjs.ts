// File auto-generated by protoc-gen-simple-ts
import * as http_pb from './http_pb'
import * as google_api_types from './http_types_sjs'
import * as google_api_mappers from './http_mappers_sjs'


export const mapHttpToGrpcWeb = (input?: google_api_types.Http): http_pb.Http | undefined => {
	if (!input) return
	const result = new http_pb.Http()
	if (input?.rules !== undefined) {
		input.rules.forEach((x: google_api_types.HttpRule, i: number) => {
			result.addRules(mapHttpRuleToGrpcWeb(x), i)
		})
    }
	if (input?.fully_decode_reserved_expansion !== undefined) result.setFully_decode_reserved_expansion(input.fully_decode_reserved_expansion)
	return result
}

export const mapHttpFromGrpcWeb = (input?: http_pb.Http): google_api_types.Http | undefined => {
	if (!input) return
	const result: google_api_types.Http = {

        fully_decode_reserved_expansion: input.getFully_decode_reserved_expansion(),
	}
    const rulesList: Array<google_api_types.HttpRule> = []
	input.getRulesList().forEach((x: any) => {
		const val = mapHttpRuleFromGrpcWeb(x)
		if (val !== undefined) rulesList.push(val)
	})
	result.rules = rulesList

	return result
}

export const mapHttpRuleToGrpcWeb = (input?: google_api_types.HttpRule): http_pb.HttpRule | undefined => {
	if (!input) return
	const result = new http_pb.HttpRule()
	if (input?.selector !== undefined) result.setSelector(input.selector)
	if (input?.get !== undefined) result.setGet(input.get)
	if (input?.put !== undefined) result.setPut(input.put)
	if (input?.post !== undefined) result.setPost(input.post)
	if (input?.delete !== undefined) result.setDelete(input.delete)
	if (input?.patch !== undefined) result.setPatch(input.patch)
	const tmpCustom = mapCustomHttpPatternToGrpcWeb(input?.custom);
    if (tmpCustom !== undefined) result.setCustom(tmpCustom)
	if (input?.body !== undefined) result.setBody(input.body)
	if (input?.response_body !== undefined) result.setResponse_body(input.response_body)
	if (input?.additional_bindings !== undefined) {
		input.additional_bindings.forEach((x: google_api_types.HttpRule, i: number) => {
			result.addAdditional_bindings(mapHttpRuleToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapHttpRuleFromGrpcWeb = (input?: http_pb.HttpRule): google_api_types.HttpRule | undefined => {
	if (!input) return
	const result: google_api_types.HttpRule = {
        selector: input.getSelector(),
        get: input.getGet(),
        put: input.getPut(),
        post: input.getPost(),
        delete: input.getDelete(),
        patch: input.getPatch(),
        custom: mapCustomHttpPatternFromGrpcWeb(input.getCustom()),
        body: input.getBody(),
        response_body: input.getResponse_body(),

	}
    const additional_bindingsList: Array<google_api_types.HttpRule> = []
	input.getAdditional_bindingsList().forEach((x: any) => {
		const val = mapHttpRuleFromGrpcWeb(x)
		if (val !== undefined) additional_bindingsList.push(val)
	})
	result.additional_bindings = additional_bindingsList

	return result
}

export const mapCustomHttpPatternToGrpcWeb = (input?: google_api_types.CustomHttpPattern): http_pb.CustomHttpPattern | undefined => {
	if (!input) return
	const result = new http_pb.CustomHttpPattern()
	if (input?.kind !== undefined) result.setKind(input.kind)
	if (input?.path !== undefined) result.setPath(input.path)
	return result
}

export const mapCustomHttpPatternFromGrpcWeb = (input?: http_pb.CustomHttpPattern): google_api_types.CustomHttpPattern | undefined => {
	if (!input) return
	const result: google_api_types.CustomHttpPattern = {
        kind: input.getKind(),
        path: input.getPath(),
	}
	return result
}

