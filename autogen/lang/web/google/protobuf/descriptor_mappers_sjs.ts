// File auto-generated by protoc-gen-simple-ts
import * as descriptor_pb from './descriptor_pb'
import * as google_protobuf_types from './descriptor_types_sjs'
import * as google_protobuf_mappers from './descriptor_mappers_sjs'


export const mapFileDescriptorSetToGrpcWeb = (input?: google_protobuf_types.FileDescriptorSet): descriptor_pb.FileDescriptorSet | undefined => {
	if (!input) return
	const result = new descriptor_pb.FileDescriptorSet()
	if (input?.file !== undefined) {
		input.file.forEach((x: google_protobuf_types.FileDescriptorProto, i: number) => {
			result.addFile(mapFileDescriptorProtoToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapFileDescriptorSetFromGrpcWeb = (input?: descriptor_pb.FileDescriptorSet): google_protobuf_types.FileDescriptorSet | undefined => {
	if (!input) return
	const result: google_protobuf_types.FileDescriptorSet = {

	}
    const fileList: Array<google_protobuf_types.FileDescriptorProto> = []
	input.getFileList().forEach((x: any) => {
		const val = mapFileDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) fileList.push(val)
	})
	result.file = fileList

	return result
}

export const mapFileDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.FileDescriptorProto): descriptor_pb.FileDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.FileDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.package !== undefined) result.setPackage(input.package)
	if (input?.dependency !== undefined) result.setDependencyList(input.dependency)
	if (input?.public_dependency !== undefined) result.setPublic_dependencyList(input.public_dependency)
	if (input?.weak_dependency !== undefined) result.setWeak_dependencyList(input.weak_dependency)
	if (input?.message_type !== undefined) {
		input.message_type.forEach((x: google_protobuf_types.DescriptorProto, i: number) => {
			result.addMessage_type(mapDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.enum_type !== undefined) {
		input.enum_type.forEach((x: google_protobuf_types.EnumDescriptorProto, i: number) => {
			result.addEnum_type(mapEnumDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.service !== undefined) {
		input.service.forEach((x: google_protobuf_types.ServiceDescriptorProto, i: number) => {
			result.addService(mapServiceDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.extension !== undefined) {
		input.extension.forEach((x: google_protobuf_types.FieldDescriptorProto, i: number) => {
			result.addExtension(mapFieldDescriptorProtoToGrpcWeb(x), i)
		})
    }
	const tmpOptions = mapFileOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	const tmpSource_code_info = mapSourceCodeInfoToGrpcWeb(input?.source_code_info);
    if (tmpSource_code_info !== undefined) result.setSource_code_info(tmpSource_code_info)
	if (input?.syntax !== undefined) result.setSyntax(input.syntax)
	return result
}

export const mapFileDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.FileDescriptorProto): google_protobuf_types.FileDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.FileDescriptorProto = {
        name: input.getName(),
        package: input.getPackage(),
        dependency: input.getDependencyList(),
        public_dependency: input.getPublic_dependencyList(),
        weak_dependency: input.getWeak_dependencyList(),




        options: mapFileOptionsFromGrpcWeb(input.getOptions()),
        source_code_info: mapSourceCodeInfoFromGrpcWeb(input.getSource_code_info()),
        syntax: input.getSyntax(),
	}
    const message_typeList: Array<google_protobuf_types.DescriptorProto> = []
	input.getMessage_typeList().forEach((x: any) => {
		const val = mapDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) message_typeList.push(val)
	})
	result.message_type = message_typeList

    const enum_typeList: Array<google_protobuf_types.EnumDescriptorProto> = []
	input.getEnum_typeList().forEach((x: any) => {
		const val = mapEnumDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) enum_typeList.push(val)
	})
	result.enum_type = enum_typeList

    const serviceList: Array<google_protobuf_types.ServiceDescriptorProto> = []
	input.getServiceList().forEach((x: any) => {
		const val = mapServiceDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) serviceList.push(val)
	})
	result.service = serviceList

    const extensionList: Array<google_protobuf_types.FieldDescriptorProto> = []
	input.getExtensionList().forEach((x: any) => {
		const val = mapFieldDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) extensionList.push(val)
	})
	result.extension = extensionList

	return result
}

export const mapDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.DescriptorProto): descriptor_pb.DescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.DescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.field !== undefined) {
		input.field.forEach((x: google_protobuf_types.FieldDescriptorProto, i: number) => {
			result.addField(mapFieldDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.extension !== undefined) {
		input.extension.forEach((x: google_protobuf_types.FieldDescriptorProto, i: number) => {
			result.addExtension(mapFieldDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.nested_type !== undefined) {
		input.nested_type.forEach((x: google_protobuf_types.DescriptorProto, i: number) => {
			result.addNested_type(mapDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.enum_type !== undefined) {
		input.enum_type.forEach((x: google_protobuf_types.EnumDescriptorProto, i: number) => {
			result.addEnum_type(mapEnumDescriptorProtoToGrpcWeb(x), i)
		})
    }
	if (input?.extension_range !== undefined) {
		input.extension_range.forEach((x: google_protobuf_types.DescriptorProto_ExtensionRange, i: number) => {
			result.addExtension_range(mapDescriptorProto_ExtensionRangeToGrpcWeb(x), i)
		})
    }
	if (input?.oneof_decl !== undefined) {
		input.oneof_decl.forEach((x: google_protobuf_types.OneofDescriptorProto, i: number) => {
			result.addOneof_decl(mapOneofDescriptorProtoToGrpcWeb(x), i)
		})
    }
	const tmpOptions = mapMessageOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	if (input?.reserved_range !== undefined) {
		input.reserved_range.forEach((x: google_protobuf_types.DescriptorProto_ReservedRange, i: number) => {
			result.addReserved_range(mapDescriptorProto_ReservedRangeToGrpcWeb(x), i)
		})
    }
	if (input?.reserved_name !== undefined) result.setReserved_nameList(input.reserved_name)
	return result
}

export const mapDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.DescriptorProto): google_protobuf_types.DescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.DescriptorProto = {
        name: input.getName(),






        options: mapMessageOptionsFromGrpcWeb(input.getOptions()),

        reserved_name: input.getReserved_nameList(),
	}
    const fieldList: Array<google_protobuf_types.FieldDescriptorProto> = []
	input.getFieldList().forEach((x: any) => {
		const val = mapFieldDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) fieldList.push(val)
	})
	result.field = fieldList

    const extensionList: Array<google_protobuf_types.FieldDescriptorProto> = []
	input.getExtensionList().forEach((x: any) => {
		const val = mapFieldDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) extensionList.push(val)
	})
	result.extension = extensionList

    const nested_typeList: Array<google_protobuf_types.DescriptorProto> = []
	input.getNested_typeList().forEach((x: any) => {
		const val = mapDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) nested_typeList.push(val)
	})
	result.nested_type = nested_typeList

    const enum_typeList: Array<google_protobuf_types.EnumDescriptorProto> = []
	input.getEnum_typeList().forEach((x: any) => {
		const val = mapEnumDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) enum_typeList.push(val)
	})
	result.enum_type = enum_typeList

    const extension_rangeList: Array<google_protobuf_types.DescriptorProto_ExtensionRange> = []
	input.getExtension_rangeList().forEach((x: any) => {
		const val = mapDescriptorProto_ExtensionRangeFromGrpcWeb(x)
		if (val !== undefined) extension_rangeList.push(val)
	})
	result.extension_range = extension_rangeList

    const oneof_declList: Array<google_protobuf_types.OneofDescriptorProto> = []
	input.getOneof_declList().forEach((x: any) => {
		const val = mapOneofDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) oneof_declList.push(val)
	})
	result.oneof_decl = oneof_declList

    const reserved_rangeList: Array<google_protobuf_types.DescriptorProto_ReservedRange> = []
	input.getReserved_rangeList().forEach((x: any) => {
		const val = mapDescriptorProto_ReservedRangeFromGrpcWeb(x)
		if (val !== undefined) reserved_rangeList.push(val)
	})
	result.reserved_range = reserved_rangeList

	return result
}

export const mapExtensionRangeToGrpcWeb = (input?: google_protobuf_types.ExtensionRange): descriptor_pb.ExtensionRange | undefined => {
	if (!input) return
	const result = new descriptor_pb.ExtensionRange()
	if (input?.start !== undefined) result.setStart(input.start)
	if (input?.end !== undefined) result.setEnd(input.end)
	const tmpOptions = mapExtensionRangeOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	return result
}

export const mapExtensionRangeFromGrpcWeb = (input?: descriptor_pb.ExtensionRange): google_protobuf_types.ExtensionRange | undefined => {
	if (!input) return
	const result: google_protobuf_types.ExtensionRange = {
        start: input.getStart(),
        end: input.getEnd(),
        options: mapExtensionRangeOptionsFromGrpcWeb(input.getOptions()),
	}
	return result
}

export const mapReservedRangeToGrpcWeb = (input?: google_protobuf_types.ReservedRange): descriptor_pb.ReservedRange | undefined => {
	if (!input) return
	const result = new descriptor_pb.ReservedRange()
	if (input?.start !== undefined) result.setStart(input.start)
	if (input?.end !== undefined) result.setEnd(input.end)
	return result
}

export const mapReservedRangeFromGrpcWeb = (input?: descriptor_pb.ReservedRange): google_protobuf_types.ReservedRange | undefined => {
	if (!input) return
	const result: google_protobuf_types.ReservedRange = {
        start: input.getStart(),
        end: input.getEnd(),
	}
	return result
}

export const mapExtensionRangeOptionsToGrpcWeb = (input?: google_protobuf_types.ExtensionRangeOptions): descriptor_pb.ExtensionRangeOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.ExtensionRangeOptions()
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapExtensionRangeOptionsFromGrpcWeb = (input?: descriptor_pb.ExtensionRangeOptions): google_protobuf_types.ExtensionRangeOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.ExtensionRangeOptions = {

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapFieldDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.FieldDescriptorProto): descriptor_pb.FieldDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.FieldDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.number !== undefined) result.setNumber(input.number)
	const tmpLabel = mapFieldDescriptorProto_LabelToGrpcWeb(input?.label);
    if (tmpLabel !== undefined) result.setLabel(tmpLabel)
	const tmpType = mapFieldDescriptorProto_TypeToGrpcWeb(input?.type);
    if (tmpType !== undefined) result.setType(tmpType)
	if (input?.type_name !== undefined) result.setType_name(input.type_name)
	if (input?.extendee !== undefined) result.setExtendee(input.extendee)
	if (input?.default_value !== undefined) result.setDefault_value(input.default_value)
	if (input?.oneof_index !== undefined) result.setOneof_index(input.oneof_index)
	if (input?.json_name !== undefined) result.setJson_name(input.json_name)
	const tmpOptions = mapFieldOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	if (input?.proto3_optional !== undefined) result.setProto3_optional(input.proto3_optional)
	return result
}

export const mapFieldDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.FieldDescriptorProto): google_protobuf_types.FieldDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.FieldDescriptorProto = {
        name: input.getName(),
        number: input.getNumber(),
        label: mapFieldDescriptorProto_LabelFromGrpcWeb(input.getLabel()),
        type: mapFieldDescriptorProto_TypeFromGrpcWeb(input.getType()),
        type_name: input.getType_name(),
        extendee: input.getExtendee(),
        default_value: input.getDefault_value(),
        oneof_index: input.getOneof_index(),
        json_name: input.getJson_name(),
        options: mapFieldOptionsFromGrpcWeb(input.getOptions()),
        proto3_optional: input.getProto3_optional(),
	}
	return result
}

export const mapFieldDescriptorProto_TypeToGrpcWeb = (input?: google_protobuf_types.FieldDescriptorProto_Type): descriptor_pb.FieldDescriptorProto.Type | undefined => {
	if (input === undefined) return
	switch (input) {
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_DOUBLE: return descriptor_pb.FieldDescriptorProto.Type.TYPE_DOUBLE
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_FLOAT: return descriptor_pb.FieldDescriptorProto.Type.TYPE_FLOAT
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_INT64: return descriptor_pb.FieldDescriptorProto.Type.TYPE_INT64
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_UINT64: return descriptor_pb.FieldDescriptorProto.Type.TYPE_UINT64
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_INT32: return descriptor_pb.FieldDescriptorProto.Type.TYPE_INT32
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_FIXED64: return descriptor_pb.FieldDescriptorProto.Type.TYPE_FIXED64
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_FIXED32: return descriptor_pb.FieldDescriptorProto.Type.TYPE_FIXED32
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_BOOL: return descriptor_pb.FieldDescriptorProto.Type.TYPE_BOOL
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_STRING: return descriptor_pb.FieldDescriptorProto.Type.TYPE_STRING
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_GROUP: return descriptor_pb.FieldDescriptorProto.Type.TYPE_GROUP
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_MESSAGE: return descriptor_pb.FieldDescriptorProto.Type.TYPE_MESSAGE
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_BYTES: return descriptor_pb.FieldDescriptorProto.Type.TYPE_BYTES
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_UINT32: return descriptor_pb.FieldDescriptorProto.Type.TYPE_UINT32
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_ENUM: return descriptor_pb.FieldDescriptorProto.Type.TYPE_ENUM
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_SFIXED32: return descriptor_pb.FieldDescriptorProto.Type.TYPE_SFIXED32
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_SFIXED64: return descriptor_pb.FieldDescriptorProto.Type.TYPE_SFIXED64
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_SINT32: return descriptor_pb.FieldDescriptorProto.Type.TYPE_SINT32
		case google_protobuf_types.FieldDescriptorProto_Type.TYPE_SINT64: return descriptor_pb.FieldDescriptorProto.Type.TYPE_SINT64
	}
}

export const mapFieldDescriptorProto_TypeFromGrpcWeb = (input?: descriptor_pb.FieldDescriptorProto.Type): google_protobuf_types.FieldDescriptorProto_Type | undefined => {
	if (input === undefined) return
	switch (input) {
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_DOUBLE: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_DOUBLE
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_FLOAT: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_FLOAT
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_INT64: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_INT64
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_UINT64: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_UINT64
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_INT32: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_INT32
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_FIXED64: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_FIXED64
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_FIXED32: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_FIXED32
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_BOOL: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_BOOL
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_STRING: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_STRING
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_GROUP: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_GROUP
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_MESSAGE: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_MESSAGE
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_BYTES: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_BYTES
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_UINT32: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_UINT32
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_ENUM: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_ENUM
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_SFIXED32: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_SFIXED32
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_SFIXED64: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_SFIXED64
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_SINT32: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_SINT32
		case descriptor_pb.FieldDescriptorProto.Type.TYPE_SINT64: return google_protobuf_types.FieldDescriptorProto_Type.TYPE_SINT64
	}
}

export const mapFieldDescriptorProto_LabelToGrpcWeb = (input?: google_protobuf_types.FieldDescriptorProto_Label): descriptor_pb.FieldDescriptorProto.Label | undefined => {
	if (input === undefined) return
	switch (input) {
		case google_protobuf_types.FieldDescriptorProto_Label.LABEL_OPTIONAL: return descriptor_pb.FieldDescriptorProto.Label.LABEL_OPTIONAL
		case google_protobuf_types.FieldDescriptorProto_Label.LABEL_REQUIRED: return descriptor_pb.FieldDescriptorProto.Label.LABEL_REQUIRED
		case google_protobuf_types.FieldDescriptorProto_Label.LABEL_REPEATED: return descriptor_pb.FieldDescriptorProto.Label.LABEL_REPEATED
	}
}

export const mapFieldDescriptorProto_LabelFromGrpcWeb = (input?: descriptor_pb.FieldDescriptorProto.Label): google_protobuf_types.FieldDescriptorProto_Label | undefined => {
	if (input === undefined) return
	switch (input) {
		case descriptor_pb.FieldDescriptorProto.Label.LABEL_OPTIONAL: return google_protobuf_types.FieldDescriptorProto_Label.LABEL_OPTIONAL
		case descriptor_pb.FieldDescriptorProto.Label.LABEL_REQUIRED: return google_protobuf_types.FieldDescriptorProto_Label.LABEL_REQUIRED
		case descriptor_pb.FieldDescriptorProto.Label.LABEL_REPEATED: return google_protobuf_types.FieldDescriptorProto_Label.LABEL_REPEATED
	}
}

export const mapOneofDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.OneofDescriptorProto): descriptor_pb.OneofDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.OneofDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	const tmpOptions = mapOneofOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	return result
}

export const mapOneofDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.OneofDescriptorProto): google_protobuf_types.OneofDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.OneofDescriptorProto = {
        name: input.getName(),
        options: mapOneofOptionsFromGrpcWeb(input.getOptions()),
	}
	return result
}

export const mapEnumDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.EnumDescriptorProto): descriptor_pb.EnumDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.EnumDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.value !== undefined) {
		input.value.forEach((x: google_protobuf_types.EnumValueDescriptorProto, i: number) => {
			result.addValue(mapEnumValueDescriptorProtoToGrpcWeb(x), i)
		})
    }
	const tmpOptions = mapEnumOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	if (input?.reserved_range !== undefined) {
		input.reserved_range.forEach((x: google_protobuf_types.EnumDescriptorProto_EnumReservedRange, i: number) => {
			result.addReserved_range(mapEnumDescriptorProto_EnumReservedRangeToGrpcWeb(x), i)
		})
    }
	if (input?.reserved_name !== undefined) result.setReserved_nameList(input.reserved_name)
	return result
}

export const mapEnumDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.EnumDescriptorProto): google_protobuf_types.EnumDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.EnumDescriptorProto = {
        name: input.getName(),

        options: mapEnumOptionsFromGrpcWeb(input.getOptions()),

        reserved_name: input.getReserved_nameList(),
	}
    const valueList: Array<google_protobuf_types.EnumValueDescriptorProto> = []
	input.getValueList().forEach((x: any) => {
		const val = mapEnumValueDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) valueList.push(val)
	})
	result.value = valueList

    const reserved_rangeList: Array<google_protobuf_types.EnumDescriptorProto_EnumReservedRange> = []
	input.getReserved_rangeList().forEach((x: any) => {
		const val = mapEnumDescriptorProto_EnumReservedRangeFromGrpcWeb(x)
		if (val !== undefined) reserved_rangeList.push(val)
	})
	result.reserved_range = reserved_rangeList

	return result
}

export const mapEnumReservedRangeToGrpcWeb = (input?: google_protobuf_types.EnumReservedRange): descriptor_pb.EnumReservedRange | undefined => {
	if (!input) return
	const result = new descriptor_pb.EnumReservedRange()
	if (input?.start !== undefined) result.setStart(input.start)
	if (input?.end !== undefined) result.setEnd(input.end)
	return result
}

export const mapEnumReservedRangeFromGrpcWeb = (input?: descriptor_pb.EnumReservedRange): google_protobuf_types.EnumReservedRange | undefined => {
	if (!input) return
	const result: google_protobuf_types.EnumReservedRange = {
        start: input.getStart(),
        end: input.getEnd(),
	}
	return result
}

export const mapEnumValueDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.EnumValueDescriptorProto): descriptor_pb.EnumValueDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.EnumValueDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.number !== undefined) result.setNumber(input.number)
	const tmpOptions = mapEnumValueOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	return result
}

export const mapEnumValueDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.EnumValueDescriptorProto): google_protobuf_types.EnumValueDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.EnumValueDescriptorProto = {
        name: input.getName(),
        number: input.getNumber(),
        options: mapEnumValueOptionsFromGrpcWeb(input.getOptions()),
	}
	return result
}

export const mapServiceDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.ServiceDescriptorProto): descriptor_pb.ServiceDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.ServiceDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.method !== undefined) {
		input.method.forEach((x: google_protobuf_types.MethodDescriptorProto, i: number) => {
			result.addMethod(mapMethodDescriptorProtoToGrpcWeb(x), i)
		})
    }
	const tmpOptions = mapServiceOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	return result
}

export const mapServiceDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.ServiceDescriptorProto): google_protobuf_types.ServiceDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.ServiceDescriptorProto = {
        name: input.getName(),

        options: mapServiceOptionsFromGrpcWeb(input.getOptions()),
	}
    const methodList: Array<google_protobuf_types.MethodDescriptorProto> = []
	input.getMethodList().forEach((x: any) => {
		const val = mapMethodDescriptorProtoFromGrpcWeb(x)
		if (val !== undefined) methodList.push(val)
	})
	result.method = methodList

	return result
}

export const mapMethodDescriptorProtoToGrpcWeb = (input?: google_protobuf_types.MethodDescriptorProto): descriptor_pb.MethodDescriptorProto | undefined => {
	if (!input) return
	const result = new descriptor_pb.MethodDescriptorProto()
	if (input?.name !== undefined) result.setName(input.name)
	if (input?.input_type !== undefined) result.setInput_type(input.input_type)
	if (input?.output_type !== undefined) result.setOutput_type(input.output_type)
	const tmpOptions = mapMethodOptionsToGrpcWeb(input?.options);
    if (tmpOptions !== undefined) result.setOptions(tmpOptions)
	if (input?.client_streaming !== undefined) result.setClient_streaming(input.client_streaming)
	if (input?.server_streaming !== undefined) result.setServer_streaming(input.server_streaming)
	return result
}

export const mapMethodDescriptorProtoFromGrpcWeb = (input?: descriptor_pb.MethodDescriptorProto): google_protobuf_types.MethodDescriptorProto | undefined => {
	if (!input) return
	const result: google_protobuf_types.MethodDescriptorProto = {
        name: input.getName(),
        input_type: input.getInput_type(),
        output_type: input.getOutput_type(),
        options: mapMethodOptionsFromGrpcWeb(input.getOptions()),
        client_streaming: input.getClient_streaming(),
        server_streaming: input.getServer_streaming(),
	}
	return result
}

export const mapFileOptionsToGrpcWeb = (input?: google_protobuf_types.FileOptions): descriptor_pb.FileOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.FileOptions()
	if (input?.java_package !== undefined) result.setJava_package(input.java_package)
	if (input?.java_outer_classname !== undefined) result.setJava_outer_classname(input.java_outer_classname)
	if (input?.java_multiple_files !== undefined) result.setJava_multiple_files(input.java_multiple_files)
	if (input?.java_generate_equals_and_hash !== undefined) result.setJava_generate_equals_and_hash(input.java_generate_equals_and_hash)
	if (input?.java_string_check_utf8 !== undefined) result.setJava_string_check_utf8(input.java_string_check_utf8)
	const tmpOptimize_for = mapFileOptions_OptimizeModeToGrpcWeb(input?.optimize_for);
    if (tmpOptimize_for !== undefined) result.setOptimize_for(tmpOptimize_for)
	if (input?.go_package !== undefined) result.setGo_package(input.go_package)
	if (input?.cc_generic_services !== undefined) result.setCc_generic_services(input.cc_generic_services)
	if (input?.java_generic_services !== undefined) result.setJava_generic_services(input.java_generic_services)
	if (input?.py_generic_services !== undefined) result.setPy_generic_services(input.py_generic_services)
	if (input?.php_generic_services !== undefined) result.setPhp_generic_services(input.php_generic_services)
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	if (input?.cc_enable_arenas !== undefined) result.setCc_enable_arenas(input.cc_enable_arenas)
	if (input?.objc_class_prefix !== undefined) result.setObjc_class_prefix(input.objc_class_prefix)
	if (input?.csharp_namespace !== undefined) result.setCsharp_namespace(input.csharp_namespace)
	if (input?.swift_prefix !== undefined) result.setSwift_prefix(input.swift_prefix)
	if (input?.php_class_prefix !== undefined) result.setPhp_class_prefix(input.php_class_prefix)
	if (input?.php_namespace !== undefined) result.setPhp_namespace(input.php_namespace)
	if (input?.php_metadata_namespace !== undefined) result.setPhp_metadata_namespace(input.php_metadata_namespace)
	if (input?.ruby_package !== undefined) result.setRuby_package(input.ruby_package)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapFileOptionsFromGrpcWeb = (input?: descriptor_pb.FileOptions): google_protobuf_types.FileOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.FileOptions = {
        java_package: input.getJava_package(),
        java_outer_classname: input.getJava_outer_classname(),
        java_multiple_files: input.getJava_multiple_files(),
        java_generate_equals_and_hash: input.getJava_generate_equals_and_hash(),
        java_string_check_utf8: input.getJava_string_check_utf8(),
        optimize_for: mapFileOptions_OptimizeModeFromGrpcWeb(input.getOptimize_for()),
        go_package: input.getGo_package(),
        cc_generic_services: input.getCc_generic_services(),
        java_generic_services: input.getJava_generic_services(),
        py_generic_services: input.getPy_generic_services(),
        php_generic_services: input.getPhp_generic_services(),
        deprecated: input.getDeprecated(),
        cc_enable_arenas: input.getCc_enable_arenas(),
        objc_class_prefix: input.getObjc_class_prefix(),
        csharp_namespace: input.getCsharp_namespace(),
        swift_prefix: input.getSwift_prefix(),
        php_class_prefix: input.getPhp_class_prefix(),
        php_namespace: input.getPhp_namespace(),
        php_metadata_namespace: input.getPhp_metadata_namespace(),
        ruby_package: input.getRuby_package(),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapFileOptions_OptimizeModeToGrpcWeb = (input?: google_protobuf_types.FileOptions_OptimizeMode): descriptor_pb.FileOptions.OptimizeMode | undefined => {
	if (input === undefined) return
	switch (input) {
		case google_protobuf_types.FileOptions_OptimizeMode.SPEED: return descriptor_pb.FileOptions.OptimizeMode.SPEED
		case google_protobuf_types.FileOptions_OptimizeMode.CODE_SIZE: return descriptor_pb.FileOptions.OptimizeMode.CODE_SIZE
		case google_protobuf_types.FileOptions_OptimizeMode.LITE_RUNTIME: return descriptor_pb.FileOptions.OptimizeMode.LITE_RUNTIME
	}
}

export const mapFileOptions_OptimizeModeFromGrpcWeb = (input?: descriptor_pb.FileOptions.OptimizeMode): google_protobuf_types.FileOptions_OptimizeMode | undefined => {
	if (input === undefined) return
	switch (input) {
		case descriptor_pb.FileOptions.OptimizeMode.SPEED: return google_protobuf_types.FileOptions_OptimizeMode.SPEED
		case descriptor_pb.FileOptions.OptimizeMode.CODE_SIZE: return google_protobuf_types.FileOptions_OptimizeMode.CODE_SIZE
		case descriptor_pb.FileOptions.OptimizeMode.LITE_RUNTIME: return google_protobuf_types.FileOptions_OptimizeMode.LITE_RUNTIME
	}
}

export const mapMessageOptionsToGrpcWeb = (input?: google_protobuf_types.MessageOptions): descriptor_pb.MessageOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.MessageOptions()
	if (input?.message_set_wire_format !== undefined) result.setMessage_set_wire_format(input.message_set_wire_format)
	if (input?.no_standard_descriptor_accessor !== undefined) result.setNo_standard_descriptor_accessor(input.no_standard_descriptor_accessor)
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	if (input?.map_entry !== undefined) result.setMap_entry(input.map_entry)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapMessageOptionsFromGrpcWeb = (input?: descriptor_pb.MessageOptions): google_protobuf_types.MessageOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.MessageOptions = {
        message_set_wire_format: input.getMessage_set_wire_format(),
        no_standard_descriptor_accessor: input.getNo_standard_descriptor_accessor(),
        deprecated: input.getDeprecated(),
        map_entry: input.getMap_entry(),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapFieldOptionsToGrpcWeb = (input?: google_protobuf_types.FieldOptions): descriptor_pb.FieldOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.FieldOptions()
	const tmpCtype = mapFieldOptions_CTypeToGrpcWeb(input?.ctype);
    if (tmpCtype !== undefined) result.setCtype(tmpCtype)
	if (input?.packed !== undefined) result.setPacked(input.packed)
	const tmpJstype = mapFieldOptions_JSTypeToGrpcWeb(input?.jstype);
    if (tmpJstype !== undefined) result.setJstype(tmpJstype)
	if (input?.lazy !== undefined) result.setLazy(input.lazy)
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	if (input?.weak !== undefined) result.setWeak(input.weak)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapFieldOptionsFromGrpcWeb = (input?: descriptor_pb.FieldOptions): google_protobuf_types.FieldOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.FieldOptions = {
        ctype: mapFieldOptions_CTypeFromGrpcWeb(input.getCtype()),
        packed: input.getPacked(),
        jstype: mapFieldOptions_JSTypeFromGrpcWeb(input.getJstype()),
        lazy: input.getLazy(),
        deprecated: input.getDeprecated(),
        weak: input.getWeak(),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapFieldOptions_CTypeToGrpcWeb = (input?: google_protobuf_types.FieldOptions_CType): descriptor_pb.FieldOptions.CType | undefined => {
	if (input === undefined) return
	switch (input) {
		case google_protobuf_types.FieldOptions_CType.STRING: return descriptor_pb.FieldOptions.CType.STRING
		case google_protobuf_types.FieldOptions_CType.CORD: return descriptor_pb.FieldOptions.CType.CORD
		case google_protobuf_types.FieldOptions_CType.STRING_PIECE: return descriptor_pb.FieldOptions.CType.STRING_PIECE
	}
}

export const mapFieldOptions_CTypeFromGrpcWeb = (input?: descriptor_pb.FieldOptions.CType): google_protobuf_types.FieldOptions_CType | undefined => {
	if (input === undefined) return
	switch (input) {
		case descriptor_pb.FieldOptions.CType.STRING: return google_protobuf_types.FieldOptions_CType.STRING
		case descriptor_pb.FieldOptions.CType.CORD: return google_protobuf_types.FieldOptions_CType.CORD
		case descriptor_pb.FieldOptions.CType.STRING_PIECE: return google_protobuf_types.FieldOptions_CType.STRING_PIECE
	}
}

export const mapFieldOptions_JSTypeToGrpcWeb = (input?: google_protobuf_types.FieldOptions_JSType): descriptor_pb.FieldOptions.JSType | undefined => {
	if (input === undefined) return
	switch (input) {
		case google_protobuf_types.FieldOptions_JSType.JS_NORMAL: return descriptor_pb.FieldOptions.JSType.JS_NORMAL
		case google_protobuf_types.FieldOptions_JSType.JS_STRING: return descriptor_pb.FieldOptions.JSType.JS_STRING
		case google_protobuf_types.FieldOptions_JSType.JS_NUMBER: return descriptor_pb.FieldOptions.JSType.JS_NUMBER
	}
}

export const mapFieldOptions_JSTypeFromGrpcWeb = (input?: descriptor_pb.FieldOptions.JSType): google_protobuf_types.FieldOptions_JSType | undefined => {
	if (input === undefined) return
	switch (input) {
		case descriptor_pb.FieldOptions.JSType.JS_NORMAL: return google_protobuf_types.FieldOptions_JSType.JS_NORMAL
		case descriptor_pb.FieldOptions.JSType.JS_STRING: return google_protobuf_types.FieldOptions_JSType.JS_STRING
		case descriptor_pb.FieldOptions.JSType.JS_NUMBER: return google_protobuf_types.FieldOptions_JSType.JS_NUMBER
	}
}

export const mapOneofOptionsToGrpcWeb = (input?: google_protobuf_types.OneofOptions): descriptor_pb.OneofOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.OneofOptions()
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapOneofOptionsFromGrpcWeb = (input?: descriptor_pb.OneofOptions): google_protobuf_types.OneofOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.OneofOptions = {

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapEnumOptionsToGrpcWeb = (input?: google_protobuf_types.EnumOptions): descriptor_pb.EnumOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.EnumOptions()
	if (input?.allow_alias !== undefined) result.setAllow_alias(input.allow_alias)
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapEnumOptionsFromGrpcWeb = (input?: descriptor_pb.EnumOptions): google_protobuf_types.EnumOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.EnumOptions = {
        allow_alias: input.getAllow_alias(),
        deprecated: input.getDeprecated(),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapEnumValueOptionsToGrpcWeb = (input?: google_protobuf_types.EnumValueOptions): descriptor_pb.EnumValueOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.EnumValueOptions()
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapEnumValueOptionsFromGrpcWeb = (input?: descriptor_pb.EnumValueOptions): google_protobuf_types.EnumValueOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.EnumValueOptions = {
        deprecated: input.getDeprecated(),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapServiceOptionsToGrpcWeb = (input?: google_protobuf_types.ServiceOptions): descriptor_pb.ServiceOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.ServiceOptions()
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapServiceOptionsFromGrpcWeb = (input?: descriptor_pb.ServiceOptions): google_protobuf_types.ServiceOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.ServiceOptions = {
        deprecated: input.getDeprecated(),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapMethodOptionsToGrpcWeb = (input?: google_protobuf_types.MethodOptions): descriptor_pb.MethodOptions | undefined => {
	if (!input) return
	const result = new descriptor_pb.MethodOptions()
	if (input?.deprecated !== undefined) result.setDeprecated(input.deprecated)
	const tmpIdempotency_level = mapMethodOptions_IdempotencyLevelToGrpcWeb(input?.idempotency_level);
    if (tmpIdempotency_level !== undefined) result.setIdempotency_level(tmpIdempotency_level)
	if (input?.uninterpreted_option !== undefined) {
		input.uninterpreted_option.forEach((x: google_protobuf_types.UninterpretedOption, i: number) => {
			result.addUninterpreted_option(mapUninterpretedOptionToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapMethodOptionsFromGrpcWeb = (input?: descriptor_pb.MethodOptions): google_protobuf_types.MethodOptions | undefined => {
	if (!input) return
	const result: google_protobuf_types.MethodOptions = {
        deprecated: input.getDeprecated(),
        idempotency_level: mapMethodOptions_IdempotencyLevelFromGrpcWeb(input.getIdempotency_level()),

	}
    const uninterpreted_optionList: Array<google_protobuf_types.UninterpretedOption> = []
	input.getUninterpreted_optionList().forEach((x: any) => {
		const val = mapUninterpretedOptionFromGrpcWeb(x)
		if (val !== undefined) uninterpreted_optionList.push(val)
	})
	result.uninterpreted_option = uninterpreted_optionList

	return result
}

export const mapMethodOptions_IdempotencyLevelToGrpcWeb = (input?: google_protobuf_types.MethodOptions_IdempotencyLevel): descriptor_pb.MethodOptions.IdempotencyLevel | undefined => {
	if (input === undefined) return
	switch (input) {
		case google_protobuf_types.MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN: return descriptor_pb.MethodOptions.IdempotencyLevel.IDEMPOTENCY_UNKNOWN
		case google_protobuf_types.MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS: return descriptor_pb.MethodOptions.IdempotencyLevel.NO_SIDE_EFFECTS
		case google_protobuf_types.MethodOptions_IdempotencyLevel.IDEMPOTENT: return descriptor_pb.MethodOptions.IdempotencyLevel.IDEMPOTENT
	}
}

export const mapMethodOptions_IdempotencyLevelFromGrpcWeb = (input?: descriptor_pb.MethodOptions.IdempotencyLevel): google_protobuf_types.MethodOptions_IdempotencyLevel | undefined => {
	if (input === undefined) return
	switch (input) {
		case descriptor_pb.MethodOptions.IdempotencyLevel.IDEMPOTENCY_UNKNOWN: return google_protobuf_types.MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN
		case descriptor_pb.MethodOptions.IdempotencyLevel.NO_SIDE_EFFECTS: return google_protobuf_types.MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS
		case descriptor_pb.MethodOptions.IdempotencyLevel.IDEMPOTENT: return google_protobuf_types.MethodOptions_IdempotencyLevel.IDEMPOTENT
	}
}

export const mapUninterpretedOptionToGrpcWeb = (input?: google_protobuf_types.UninterpretedOption): descriptor_pb.UninterpretedOption | undefined => {
	if (!input) return
	const result = new descriptor_pb.UninterpretedOption()
	if (input?.name !== undefined) {
		input.name.forEach((x: google_protobuf_types.UninterpretedOption_NamePart, i: number) => {
			result.addName(mapUninterpretedOption_NamePartToGrpcWeb(x), i)
		})
    }
	if (input?.identifier_value !== undefined) result.setIdentifier_value(input.identifier_value)
	if (input?.positive_int_value !== undefined) result.setPositive_int_value(input.positive_int_value)
	if (input?.negative_int_value !== undefined) result.setNegative_int_value(input.negative_int_value)
	if (input?.double_value !== undefined) result.setDouble_value(input.double_value)
	if (input?.string_value !== undefined) result.setString_value(input.string_value)
	if (input?.aggregate_value !== undefined) result.setAggregate_value(input.aggregate_value)
	return result
}

export const mapUninterpretedOptionFromGrpcWeb = (input?: descriptor_pb.UninterpretedOption): google_protobuf_types.UninterpretedOption | undefined => {
	if (!input) return
	const result: google_protobuf_types.UninterpretedOption = {

        identifier_value: input.getIdentifier_value(),
        positive_int_value: input.getPositive_int_value(),
        negative_int_value: input.getNegative_int_value(),
        double_value: input.getDouble_value(),
        string_value: input.getString_value(),
        aggregate_value: input.getAggregate_value(),
	}
    const nameList: Array<google_protobuf_types.UninterpretedOption_NamePart> = []
	input.getNameList().forEach((x: any) => {
		const val = mapUninterpretedOption_NamePartFromGrpcWeb(x)
		if (val !== undefined) nameList.push(val)
	})
	result.name = nameList

	return result
}

export const mapNamePartToGrpcWeb = (input?: google_protobuf_types.NamePart): descriptor_pb.NamePart | undefined => {
	if (!input) return
	const result = new descriptor_pb.NamePart()
	if (input?.name_part !== undefined) result.setName_part(input.name_part)
	if (input?.is_extension !== undefined) result.setIs_extension(input.is_extension)
	return result
}

export const mapNamePartFromGrpcWeb = (input?: descriptor_pb.NamePart): google_protobuf_types.NamePart | undefined => {
	if (!input) return
	const result: google_protobuf_types.NamePart = {
        name_part: input.getName_part(),
        is_extension: input.getIs_extension(),
	}
	return result
}

export const mapSourceCodeInfoToGrpcWeb = (input?: google_protobuf_types.SourceCodeInfo): descriptor_pb.SourceCodeInfo | undefined => {
	if (!input) return
	const result = new descriptor_pb.SourceCodeInfo()
	if (input?.location !== undefined) {
		input.location.forEach((x: google_protobuf_types.SourceCodeInfo_Location, i: number) => {
			result.addLocation(mapSourceCodeInfo_LocationToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapSourceCodeInfoFromGrpcWeb = (input?: descriptor_pb.SourceCodeInfo): google_protobuf_types.SourceCodeInfo | undefined => {
	if (!input) return
	const result: google_protobuf_types.SourceCodeInfo = {

	}
    const locationList: Array<google_protobuf_types.SourceCodeInfo_Location> = []
	input.getLocationList().forEach((x: any) => {
		const val = mapSourceCodeInfo_LocationFromGrpcWeb(x)
		if (val !== undefined) locationList.push(val)
	})
	result.location = locationList

	return result
}

export const mapLocationToGrpcWeb = (input?: google_protobuf_types.Location): descriptor_pb.Location | undefined => {
	if (!input) return
	const result = new descriptor_pb.Location()
	if (input?.path !== undefined) result.setPathList(input.path)
	if (input?.span !== undefined) result.setSpanList(input.span)
	if (input?.leading_comments !== undefined) result.setLeading_comments(input.leading_comments)
	if (input?.trailing_comments !== undefined) result.setTrailing_comments(input.trailing_comments)
	if (input?.leading_detached_comments !== undefined) result.setLeading_detached_commentsList(input.leading_detached_comments)
	return result
}

export const mapLocationFromGrpcWeb = (input?: descriptor_pb.Location): google_protobuf_types.Location | undefined => {
	if (!input) return
	const result: google_protobuf_types.Location = {
        path: input.getPathList(),
        span: input.getSpanList(),
        leading_comments: input.getLeading_comments(),
        trailing_comments: input.getTrailing_comments(),
        leading_detached_comments: input.getLeading_detached_commentsList(),
	}
	return result
}

export const mapGeneratedCodeInfoToGrpcWeb = (input?: google_protobuf_types.GeneratedCodeInfo): descriptor_pb.GeneratedCodeInfo | undefined => {
	if (!input) return
	const result = new descriptor_pb.GeneratedCodeInfo()
	if (input?.annotation !== undefined) {
		input.annotation.forEach((x: google_protobuf_types.GeneratedCodeInfo_Annotation, i: number) => {
			result.addAnnotation(mapGeneratedCodeInfo_AnnotationToGrpcWeb(x), i)
		})
    }
	return result
}

export const mapGeneratedCodeInfoFromGrpcWeb = (input?: descriptor_pb.GeneratedCodeInfo): google_protobuf_types.GeneratedCodeInfo | undefined => {
	if (!input) return
	const result: google_protobuf_types.GeneratedCodeInfo = {

	}
    const annotationList: Array<google_protobuf_types.GeneratedCodeInfo_Annotation> = []
	input.getAnnotationList().forEach((x: any) => {
		const val = mapGeneratedCodeInfo_AnnotationFromGrpcWeb(x)
		if (val !== undefined) annotationList.push(val)
	})
	result.annotation = annotationList

	return result
}

export const mapAnnotationToGrpcWeb = (input?: google_protobuf_types.Annotation): descriptor_pb.Annotation | undefined => {
	if (!input) return
	const result = new descriptor_pb.Annotation()
	if (input?.path !== undefined) result.setPathList(input.path)
	if (input?.source_file !== undefined) result.setSource_file(input.source_file)
	if (input?.begin !== undefined) result.setBegin(input.begin)
	if (input?.end !== undefined) result.setEnd(input.end)
	return result
}

export const mapAnnotationFromGrpcWeb = (input?: descriptor_pb.Annotation): google_protobuf_types.Annotation | undefined => {
	if (!input) return
	const result: google_protobuf_types.Annotation = {
        path: input.getPathList(),
        source_file: input.getSource_file(),
        begin: input.getBegin(),
        end: input.getEnd(),
	}
	return result
}

